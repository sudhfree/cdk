import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.dynamicframe import DynamicFrame
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql.functions import unix_timestamp
from pyspark.sql.functions import trim

##glueContext = GlueContext(SparkContext.getOrCreate())
## @params: [TempDir, JOB_NAME]
args = getResolvedOptions(sys.argv, ['TempDir','JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

datasource0 = glueContext.create_dynamic_frame.from_catalog(database ="test_royalties_data", table_name = "fct_live_radio",transformation_ctx = "datasource0")
datasource1 = glueContext.create_dynamic_frame.from_catalog(database = "test_royalties_data", table_name = "fct_spins_master",transformation_ctx = "datasource1")

datasource0_tmp = datasource0.toDF()
datasource1_tmp = datasource1.toDF()

datasource0_tmp.createOrReplaceTempView("fct_live_radio")
datasource1_tmp.createOrReplaceTempView("fct_spins_master")

df1 = spark.sql("WITH track_detail AS (\
    SELECT \
        UNIX_TIMESTAMP(lr.session_end) - UNIX_TIMESTAMP(lr.session_start) AS session_duration, \
        UNIX_TIMESTAMP(spin_end) - UNIX_TIMESTAMP(spin_start) AS spin_duration, \
        UNIX_TIMESTAMP(spin_end) - UNIX_TIMESTAMP(spin_start) + \
            UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) - \
            ( \
                greatest(UNIX_TIMESTAMP(spin_end), UNIX_TIMESTAMP(session_end)) - \
                least(UNIX_TIMESTAMP(spin_start), UNIX_TIMESTAMP(session_start)) \
            )  \
        AS listen_duration, \
        trim(session_start) As session_start, \
        trim(session_end) As session_end, \
        trim(elapsed_time) As elapsed_time, \
        is_mobile As is_mobile, \
        cp_code As cp_code, \
        trim(lr.stream_id) As stream_id, \
        IFNULL(call_letters,'') As call_letters, \
        IFNULL(c_ip,'') As c_ip, \
        profile_id, \
        IFNULL(uid,'') As uid, \
        status_code As status_code, \
        IFNULL(user_id,'') As user_id, \
        IFNULL(user_id_cume,'') As user_id_cume, \
        IFNULL(user_agent,'') As user_agent, \
        IFNULL(init_id,'') As init_id, \
        IFNULL(listener_id,'') As listener_id, \
        IFNULL(carrier,'') As carrier, \
        IFNULL(client_type,'') As client_type, \
        IFNULL(device_id,'') As device_id, \
        device_pk As device_pk, \
        IFNULL(device_name,'') As device_name, \
        terminal_id As terminal_id, \
        IFNULL(dist,'') As dist, \
        IFNULL(territory,'') As territory, \
        IFNULL(lon,'') As lon, \
        IFNULL(lat,'') As lat, \
        fb_broadcast As fb_broadcast, \
        IFNULL(iheartradioversion,'') As iheartradioversion, \
        IFNULL(os_version,'') As os_version, \
        played_from As played_from, \
        IFNULL(camp_id,'') As camp_id, \
        IFNULL(p_name,'') As p_name, \
        IFNULL(c_id,'') As c_id, \
        IFNULL(at,'') As at, \
        item_count As item_count, \
        IFNULL(mod_time,'') As mod_time, \
        IFNULL(is_anonymous,'') As is_anonymous, \
        is_triton As is_triton, \
        is_blacklist As is_blacklist, \
        IFNULL(amsparams_playerid,'') As amsparams_playerid, \
        amsparams_skey As amsparams_skey, \
        awparams_n As awparams_n, \
        awparams_g As awparams_g, \
        IFNULL(awparams_companionads,'') As awparams_companionads, \
        IFNULL(awparams_ccaud,'') As awparams_ccaud, \
        IFNULL(file_date,'') As file_date, \
        elapsed_time_raw As elapsed_time_raw, \
        defrag_count As defrag_count, \
        IFNULL(source,'') As source, \
        trim(spin_start) As spin_start, \
        trim(spin_end) As spin_end, \
        IFNULL(call_letter,'') As call_letter, \
        IFNULL(artist,'') As artist, \
        IFNULL(title,'') As title, \
        duration As duration, \
        mbid As mbid, \
        cart_number As cart_number, \
        CASE \
            WHEN product_id = 0 THEN NULL \
            ELSE product_id \
        END AS product_id, \
        artist_id As artist_id, \
        IFNULL(event_type,'') As event_type, \
        esid As esid, \
        IFNULL(data_source,'') As data_source, \
        is_flashback, \
        lr.dt as dt \
    FROM fct_live_radio AS lr \
   inner JOIN fct_spins_master AS sm \
        ON (lr.stream_id = sm.stream_id) \
    WHERE \
        lr.session_start < sm.spin_end \
        AND lr.session_end > sm.spin_start \
        AND lr.dt IN ( \
            DATE_SUB('2020-10-11', 2), \
            DATE_SUB('2020-10-11', 1), \
            '2020-10-11') \
        AND sm.dt IN ( \
            DATE_SUB('2020-10-11', 1), \
            '2020-10-11') \
        AND date_format(sm.spin_start,'yyyy-MM-dd') = '2020-10-11' \
 ) select \
    MAX(session_duration) As session_duration, \
    MAX(spin_duration) As spin_duration, \
    MAX(listen_duration) As listen_duration, \
    MAX(session_start) AS session_start, \
    MAX(session_end) AS session_end, \
    sum(elapsed_time) AS elapsed_time, \
    MAX(is_mobile) AS is_mobile, \
    MAX(cp_code) AS cp_code, \
    stream_id, \
    MAX(call_letters) AS call_letters, \
    MAX(c_ip) AS c_ip, \
    MAX(profile_id) AS profile_id, \
    MAX(uid) AS uid, \
    MAX(status_code) AS status_code, \
    MAX(user_id) AS user_id, \
    MAX(user_id_cume) AS user_id_cume, \
    MAX(user_agent) AS user_agent, \
    MAX(init_id) AS init_id, \
    MAX(listener_id) AS listener_id, \
    MAX(carrier) AS carrier, \
    MAX(client_type) AS client_type, \
    MAX(device_id) AS device_id, \
    MAX(device_pk) AS device_pk, \
    MAX(device_name) AS device_name, \
    MAX(terminal_id) AS terminal_id, \
    MAX(dist) AS dist, \
    MAX(territory) AS territory, \
    MAX(lon) AS lon, \
    MAX(lat) AS lat, \
    MAX(fb_broadcast) AS fb_broadcast, \
    MAX(iheartradioversion) AS iheartradioversion, \
    MAX(os_version) AS os_version, \
    MAX(played_from) AS played_from, \
    MAX(camp_id) AS camp_id, \
    MAX(p_name) AS p_name, \
    MAX(c_id) AS c_id, \
    MAX(at) AS at, \
    MAX(item_count) AS item_count, \
    MAX(mod_time) AS mod_time, \
    MAX(is_anonymous) AS is_anonymous, \
    MAX(is_triton) AS is_triton, \
    MAX(is_blacklist) AS is_blacklist, \
    MAX(amsparams_playerid) AS amsparams_playerid, \
    MAX(amsparams_skey) AS amsparams_skey, \
    MAX(awparams_n) AS awparams_n, \
    MAX(awparams_g) AS awparams_g, \
    MAX(awparams_companionads) AS awparams_companionads, \
    MAX(awparams_ccaud) AS awparams_ccaud, \
    MAX(file_date) AS file_date, \
    sum(elapsed_time_raw) AS elapsed_time_raw, \
    MAX(defrag_count) AS defrag_count, \
    MAX(source) AS source, \
    spin_start, \
    MAX(spin_end) AS spin_end, \
    MAX(call_letter) AS call_letter, \
    MAX(artist) AS artist, \
    MAX(title) AS title, \
    MAX(duration) AS duration, \
    MAX(mbid) AS mbid, \
    MAX(cart_number) AS cart_number, \
    CASE \
        WHEN MAX(product_id) = 0  \
        THEN null \
        ELSE MAX(product_id) \
    END AS product_id, \
    MAX(artist_id) AS artist_id, \
    MAX(event_type) AS event_type, \
    MAX(esid) AS esid, \
    MAX(data_source) AS data_source, \
    MAX(is_flashback) AS is_flashback, \
    COUNT(*) AS session_count, \
    COALESCE(CASE WHEN profile_id < 0 THEN '' ELSE cast(profile_id AS string) END, user_id, c_ip) AS royalty_key, \
    dt \
FROM track_detail raw \
GROUP BY \
    session_duration,stream_id,spin_start,COALESCE(CASE WHEN profile_id < 0 THEN '' ELSE cast(profile_id AS string) END, user_id, c_ip),dt \
")

dyf_live_radio_trk_usrs = DynamicFrame.fromDF(df1, glueContext, "nested")

##dropnullfields1 = DropNullFields.apply(frame = dyf_live_radio_trk_usrs, transformation_ctx = "dropnullfields")

#print(dyf_live_radio_trk_usrs.show(1))

applymapping1 = ApplyMapping.apply(frame = dyf_live_radio_trk_usrs, mappings =
[("session_duration", "session_duration", "int"),("spin_duration","spin_duration","int"),
("listen_duration","listen_duration","int"),("session_start","string",
"session_start","timestamp"), ("session_end","string", "session_end","timestamp"),
("elapsed_time","elapsed_time","int"), ("is_mobile","int", "is_mobile","int"),
("cp_code","int", "cp_code","int"),("stream_id","stream_id", "int"),
("call_letters", "string", "call_letters", "string"),("c_ip", "string","c_ip", "string"),
("profile_id", "bigint", "profile_id", "bigint"),("uid", "string","uid", "string"),
("status_code", "int", "status_code", "int"),("user_id","string", "user_id", "string"),
("user_id_cume", "string", "user_id_cume","string"),("user_agent", "string", "user_agent", "string"),
("init_id", "string", "init_id", "string"),("listener_id", "string", "listener_id", "string"),
("carrier", "string","carrier", "string"),("client_type", "string", "client_type","string"),
("device_id", "string","device_id", "string"),("device_pk", "int", "device_pk","int"),
("device_name", "string","device_name", "string"),("terminal_id", "int", "terminal_id","int"),
("dist", "string","dist", "string"),("territory", "string", "territory","string"),
("lon", "string","lon", "string"),("lat", "string", "lat","string"),
("fb_broadcast", "int","fb_broadcast", "int"),("iheartradioversion", "string", "iheartradioversion","string"),
("os_version", "string","os_version", "string"),("played_from", "int", "played_from","int"),
("camp_id", "string","camp_id", "string"),("p_name", "string", "p_name","string"),
("c_id", "string","c_id", "string"),("at", "string", "at","string"),
("item_count","item_count", "int"),("mod_time", "string", "mod_time","string"),
("is_anonymous", "string","is_anonymous", "string"),("is_triton", "int", "is_triton","int"),
("is_blacklist", "int","is_blacklist", "int"),("amsparams_playerid", "string", "amsparams_playerid","string"),
("amsparams_skey", "int","amsparams_skey", "int"),("awparams_n", "int", "awparams_n","int"),
("awparams_g", "int","awparams_g", "int"),("awparams_companionads", "string", "awparams_companionads","string"),
("awparams_ccaud", "string","awparams_ccaud", "string"),("file_date", "string", "file_date","string"),
("elapsed_time_raw","elapsed_time_raw", "bigint"),("defrag_count", "int", "defrag_count","int"),
("source", "string","source", "string"),("spin_start", "string", "spin_start","timestamp"),
("spin_end", "string","spin_end", "timestamp"),("call_letter", "string", "call_letter","string"),
("artist", "string","artist", "string"),("title", "string", "title","string"),
("duration", "float","duration", "DOUBLE PRECISION"),("mbid", "int", "mbid","int"),
("cart_number", "int","cart_number", "int"),("product_id", "int", "product_id","int"),
("artist_id", "int","artist_id", "int"),("event_type", "string", "event_type","string"),
("esid", "int","esid", "int"),("data_source", "string", "data_source","string"),
("is_flashback", "boolean","is_flashback", "boolean"),("session_count", "session_count","int"),
("royalty_key", "string","royalty_key", "string"),("dt","dt", "string")], transformation_ctx = "applymapping1")

#print(applymapping1.show(1))

selectfields2 = SelectFields.apply(frame = applymapping1, paths =
["session_duration","spin_duration","listen_duration","session_start","session_end","elapsed_time","is_mobile","cp_code","stream_id","call_letters","c_ip","profile_id",
"uid","status_code","user_id","user_id_cume","user_agent","init_id","listener_id","carrier","client_type","device_id","device_pk","device_name","terminal_id","dist","territory","lon","lat","fb_broadcast",
"iheartradioversion","os_version","played_from","camp_id","p_name","c_id","at","item_count","mod_time","is_anonymous","is_triton","is_blacklist","amsparams_playerid","amsparams_skey","awparams_n","awparams_g",
"awparams_companionads","awparams_ccaud","file_date","elapsed_time_raw","defrag_count","source","spin_start","spin_end","call_letter","artist","title","duration","mbid","cart_number","product_id","artist_id","event_type",
"esid","data_source","is_flashback","session_count","royalty_key","dt"],transformation_ctx = "selectfields2")

#print(selectfields2.show(1))

datasink4 = glueContext.write_dynamic_frame.from_jdbc_conf(frame=selectfields2, catalog_connection="Royalties2.0",
                                                   connection_options={"preactions":"truncate table dw_royalties.fct_live_radio_track_users;","dbtable": "dw_royalties.fct_live_radio_track_users", "database": "devroyalties"},
                                                   redshift_tmp_dir = args["TempDir"], transformation_ctx = "datasink4")
                                                  
job.commit()