import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.dynamicframe import DynamicFrame
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql.functions import *

## @params: [TempDir, JOB_NAME]
args = getResolvedOptions(sys.argv, ['TempDir','JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)



datasource0 = glueContext.create_dynamic_frame.from_catalog(database ="test_royalties_data", table_name = "fct_custom_radio",transformation_ctx = "datasource0")
datasource1 = glueContext.create_dynamic_frame.from_catalog(database ="test_royalties_data", table_name = "dim_catalog_4corp_royalty",transformation_ctx = "datasource1")
datasource2 = glueContext.create_dynamic_frame.from_catalog(database ="test_royalties_data", table_name = "od_record_provider",transformation_ctx = "datasource2")
datasource3 = glueContext.create_dynamic_frame.from_catalog(database ="royalties2.0_redshift", table_name = "devroyalties_dw_royalties_fct_live_radio_track_users",redshift_tmp_dir=args["TempDir"],transformation_ctx = "datasource3")

datasource0_tmp = datasource0.toDF()
datasource1_tmp = datasource1.toDF()
datasource2_tmp = datasource2.toDF()
datasource3_tmp = datasource3.toDF()

datasource0_tmp.createOrReplaceTempView("fct_custom_radio")
datasource1_tmp.createOrReplaceTempView("dim_catalog")
datasource2_tmp.createOrReplaceTempView("od_record_provider")
datasource3_tmp.createOrReplaceTempView("fct_live_radio_track_users")


df1 = spark.sql("SELECT dc.record_provider_id,dc.record_provider_name,p.deal_type,p.is_active,dc.product_id as id,dc.artist_name,dc.artist_name||'_'||dc.title,\
                        dc.title,dc.isrc,dc.upc,dc.grid,dc.trackbundle_id,dc.trackbundle_title,dc.track_number,dc.volume_number AS VolumeNumber,\
                        dc.record_label_name,dc.record_sub_label_name,dc.duration,dc.registered_date,dc.track_version, dc.dt \
                FROM \
                    (   SELECT track_id FROM fct_custom_radio \
                            UNION \
                        SELECT product_id FROM fct_live_radio_track_users \
                    )tr\
                LEFT JOIN dim_catalog dc  ON dc.product_id=tr.track_id\
                        AND dc.broken_code=0\
                        AND ('2020-10-11 00:00:00' BETWEEN dc.date_start AND dc.date_end ) \
                INNER JOIN od_record_provider p ON p.record_provider_id=dc.record_provider_id \
                       AND LOWER(p.licensee)='iheart' \
                       AND p.is_active\
                WHERE dc.record_provider_id IS NOT NULL")

dyf_trk_ownership = DynamicFrame.fromDF(df1, glueContext, "nested")


applymapping1 = ApplyMapping.apply(frame = dyf_trk_ownership, mappings =
[("record_provider_id", "record_provider_id", "int"),("record_provider_name", "string", "record_provider_name","string"),("deal_type","string", "deal_type","string"),("is_active","boolean",
"is_active","boolean"), ("id","int", "id","int"),
("artist_name","string", "artist_name","string"), ("artist_title","string", "artist_title","string"),
("title","string", "title","string"),("isrc","string", "isrc", "string"),("upc","string", "upc", "string"),("grid","string", "grid", "string"),
("trackbundle_id", "int", "trackbundleid", "int"),("trackbundle_title", "string","trackbundletitle", "string"),("track_number", "int","tracknumber", "bigint"),
("volume_number", "int", "volumenumber", "int"),("record_label_name", "string","recordlabelname", "string"),("record_sub_label_name", "string","recordsublabelname", "string"),
("duration", "double", "duration", "double"),("registered_date","string", "registered_date", "string"),("track_version","string", "track_version", "string"),("dt","string", "dt", "string")], transformation_ctx = "applymapping1")

selectfields2 = SelectFields.apply(frame = applymapping1, paths =
["record_provider_id","record_provider_name","deal_type","is_active","id","artist_name","artist_title","title","isrc","upc","grid","trackbundleid","trackbundletitle","tracknumber","volumenumber","recordlabelname","recordsublabelname","duration","registered_date","track_version","dt"],
transformation_ctx = "selectfields2")

datasink4 = glueContext.write_dynamic_frame.from_jdbc_conf(frame= selectfields2, catalog_connection = "Royalties2.0", connection_options = {"preactions":"truncate table dw_royalties.track_ownership;","dbtable": "dw_royalties.track_ownership", "database": "devroyalties"}, redshift_tmp_dir = args["TempDir"], transformation_ctx = "datasink4")

job.commit()